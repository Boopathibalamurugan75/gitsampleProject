Program 1:
    Write a Go program to display the largest and smallest word in a string.
    Test Data :
        Input:
            Input the string : Australia is famous for its natural wonders 
        Expected Output : 
            Smallest Word :  is 
            Largest Word :  Australia 

Program 2:
    Write a Go programming to find the repeated character in a given string.
        Test Data :
        Input:  
            Input a string: test
        Expected Output:
            Input a string: The first repetitive character in test is: t

Program 3:
    Swap the values of two variables without a temporary variable.
    Test Data :
        Input value for x & y:
        Before swapping the value of x & y: 5 7
        After swapping the value of x & y: 7 5

Program 4:
    Write a program in Go to find the maximum and minimum element in an array
        Test Data :
            Input:
                Input the number of elements to be stored in the array :3
                Input 3 elements in the array :
                element - 0 : 45
                element - 1 : 25
                element - 2 : 21
            Expected Output :
                Maximum element is : 45
                Minimum element is : 21

Program 5:
    Write a Go program that accepts three integers and find the maximum of three.
    Test Data :
        Input:
            Input the first integer: 25
            Input the second integer: 35
            Input the third integer: 15
        Expected Output:
            Maximum value of three integers: 35






















func splitBySpace(s string) []string {
	var words []string
	word := ""

	for i := 0; i < len(s); i++ {
		if s[i] != ' ' {
			// Add character to the current word
			Word += string(s[i])
		} else if word != "" {
			// If a space is found and word is non-empty, add word to list
			Words = append(words, word)
			Word = "" // Reset word for the next one
		}
	}

	// Append the last word if it's non-empty (in case there's no trailing space)
	if word != "" {
		Words = append(words, word)
	}

	return words
}
func spiltWordInString(){
	// Prompt the user for input
	fmt.Print("Input a string: ")

	// Use bufio to read a full line of input
	reader := bufio.NewReader(os.Stdin)
	input, _ := reader.ReadString('\n')

	// Trim any trailing newline characters
	input = input[:len(input)-1]

	// Split the string by spaces (using custom function)
	words := splitBySpace(input)

	// Print the result
	fmt.Println("Strings or words after split by space are:")
	for _, word := range words {
		fmt.Println(word)
	}

}


